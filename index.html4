<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeSoft Calculator</title>
    <style>
        :root {
            --primary: #3498db;
            --dark: #2c3e50;
            --light: #ecf0f1;
            --accent: #e74c3c;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        }

        .calculator {
            width: 320px;
            background: white;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: transform 0.3s ease;
        }

        .calculator:hover {
            transform: translateY(-5px);
        }

        .calculator-header {
            background: var(--dark);
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .calculator-name {
            font-weight: 600;
            font-size: 14px;
            letter-spacing: 1px;
        }

        .calculator-theme {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50px;
            padding: 3px 8px;
            font-size: 12px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .calculator-theme:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .calculator-display {
            background: var(--light);
            padding: 20px;
            text-align: right;
            position: relative;
        }

        .calculator-operation {
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 14px;
            color: #7f8c8d;
            height: 18px;
        }

        .calculator-result {
            font-size: 36px;
            font-weight: 600;
            color: var(--dark);
            overflow-x: auto;
            white-space: nowrap;
            padding-right: 5px;
        }

        .calculator-buttons {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 1px;
            background: #bdc3c7;
        }

        .calculator-btn {
            border: none;
            outline: none;
            height: 70px;
            font-size: 18px;
            background: white;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
            overflow: hidden;
        }

        .calculator-btn:active {
            transform: scale(0.98);
        }

        .calculator-btn::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 5px;
            height: 5px;
            background: rgba(0, 0, 0, 0.1);
            opacity: 0;
            border-radius: 100%;
            transform: scale(1, 1) translate(-50%, -50%);
            transform-origin: 50% 50%;
        }

        .calculator-btn:focus:not(:active)::after {
            animation: ripple 0.6s ease-out;
        }

        @keyframes ripple {
            0% {
                transform: scale(0, 0);
                opacity: 0.5;
            }
            20% {
                transform: scale(25, 25);
                opacity: 0.3;
            }
            100% {
                transform: scale(40, 40);
                opacity: 0;
            }
        }

        .operator {
            background: var(--primary);
            color: white;
            font-weight: 600;
        }

        .equals {
            background: var(--accent);
            color: white;
            font-weight: 600;
        }

        .function {
            background: var(--light);
            font-weight: 600;
        }

        .span-2 {
            grid-column: span 2;
        }

        .copy-notice {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--dark);
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            font-size: 13px;
            opacity: 0;
            transition: opacity 0.3s;
            pointer-events: none;
        }

        .show-notice {
            opacity: 1;
        }

        @media (max-width: 360px) {
            .calculator {
                width: 100%;
                height: 100vh;
                border-radius: 0;
            }
            
            .calculator-buttons {
                height: calc(100vh - 146px);
            }
            
            .calculator-btn {
                height: auto;
            }
        }
    </style>
</head>
<body>
    <div class="calculator">
        <div class="calculator-header">
            <div class="calculator-name">CodeSoft Calculator</div>
            <div class="calculator-theme">Toggle Theme</div>
        </div>
        <div class="calculator-display">
            <div class="calculator-operation"></div>
            <div class="calculator-result" id="result">0</div>
        </div>
        <div class="calculator-buttons">
            <button class="calculator-btn function" data-val="AC">AC</button>
            <button class="calculator-btn function" data-val="+-">+/-</button>
            <button class="calculator-btn function" data-val="%">%</button>
            <button class="calculator-btn operator" data-val="/">/</button>
            
            <button class="calculator-btn" data-val="7">7</button>
            <button class="calculator-btn" data-val="8">8</button>
            <button class="calculator-btn" data-val="9">9</button>
            <button class="calculator-btn operator" data-val="*">Ã—</button>
            
            <button class="calculator-btn" data-val="4">4</button>
            <button class="calculator-btn" data-val="5">5</button>
            <button class="calculator-btn" data-val="6">6</button>
            <button class="calculator-btn operator" data-val="-">-</button>
            
            <button class="calculator-btn" data-val="1">1</button>
            <button class="calculator-btn" data-val="2">2</button>
            <button class="calculator-btn" data-val="3">3</button>
            <button class="calculator-btn operator" data-val="+">+</button>
            
            <button class="calculator-btn span-2" data-val="0">0</button>
            <button class="calculator-btn" data-val=".">.</button>
            <button class="calculator-btn equals" data-val="=">=</button>
        </div>
    </div>

    <div class="copy-notice" id="copyNotice">Copied to clipboard!</div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const result = document.getElementById('result');
            const operation = document.querySelector('.calculator-operation');
            const buttons = document.querySelectorAll('.calculator-btn');
            const themeToggle = document.querySelector('.calculator-theme');
            const copyNotice = document.getElementById('copyNotice');
            
            let currentInput = '0';
            let previousInput = '';
            let operationSymbol = '';
            let resetScreen = false;
            
            // Update display
            function updateDisplay() {
                result.textContent = currentInput;
                operation.textContent = previousInput + ' ' + operationSymbol;
                
                // Adjust font size for long numbers
                if (currentInput.length > 10) {
                    result.style.fontSize = ${36 - (currentInput.length - 10) * 2}px;
                } else {
                    result.style.fontSize = '36px';
                }
            }
            
            // Handle number input
            function inputNumber(number) {
                if (currentInput === '0' || resetScreen) {
                    currentInput = number;
                    resetScreen = false;
                } else {
                    currentInput += number;
                }
                
                // Check decimal limit
                const decimalParts = currentInput.split('.');
                if (decimalParts[1] && decimalParts[1].length > 5) {
                    currentInput = decimalParts[0] + '.' + decimalParts[1].substring(0,5);
                }
                
                updateDisplay();
            }
            
            // Handle operation input
            function inputOperation(op) {
                if (operationSymbol && !resetScreen) {
                    compute();
                }
                
                previousInput = currentInput;
                operationSymbol = op;
                resetScreen = true;
                updateDisplay();
            }
            
            // Compute the operation
            function compute() {
                let computation;
                const prev = parseFloat(previousInput);
                const current = parseFloat(currentInput);
                
                if (isNaN(prev) || isNaN(current)) return;
                
                switch (operationSymbol) {
                    case '+':
                        computation = prev + current;
                        break;
                    case '-':
                        computation = prev - current;
                        break;
                    case '*':
                        computation = prev * current;
                        break;
                    case '/':
                        computation = prev / current;
                        break;
                    case '%':
                        computation = prev % current;
                        break;
                    default:
                        return;
                }
                
                currentInput = computation.toString();
                operationSymbol = '';
                previousInput = '';
                resetScreen = true;
                updateDisplay();
            }
            
            // Handle special functions
            function handleSpecialFunctions(func) {
                switch (func) {
                    case 'AC':
                        currentInput = '0';
                        previousInput = '';
                        operationSymbol = '';
                        break;
                    case '+-':
                        currentInput = (parseFloat(currentInput) * -1).toString();
                        break;
                    case '%':
                        inputOperation('%');
                        return;
                }
                updateDisplay();
            }
            
            // Handle button clicks
            buttons.forEach(button => {
                button.addEventListener('click', () => {
                    const value = button.getAttribute('data-val');
                    
                    if (button.classList.contains('operator')) {
                        inputOperation(value);
                    } else if (button.classList.contains('equals')) {
                        compute();
                    } else if (button.classList.contains('function')) {
                        handleSpecialFunctions(value);
                    } else {
                        inputNumber(value);
                    }
                    
                    // Button animation
                    button.classList.add('active');
                    setTimeout(() => {
                        button.classList.remove('active');
                    }, 100);
                });
            });
            
            // Theme toggle functionality
            themeToggle.addEventListener('click', () => {
                document.body.classList.toggle('dark-mode');
                
                if (document.body.classList.contains('dark-mode')) {
                    document.documentElement.style.setProperty('--primary', '#9b59b6');
                    document.documentElement.style.setProperty('--dark', '#2d3436');
                    document.documentElement.style.setProperty('--light', '#636e72');
                    document.documentElement.style.setProperty('--accent', '#e84393');
                    themeToggle.textContent = 'Light Theme';
                } else {
                    document.documentElement.style.setProperty('--primary', '#3498db');
                    document.documentElement.style.setProperty('--dark', '#2c3e50');
                    document.documentElement.style.setProperty('--light', '#ecf0f1');
                    document.documentElement.style.setProperty('--accent', '#e74c3c');
                    themeToggle.textContent = 'Dark Theme';
                }
            });
            
            // Keyboard support
            document.addEventListener('keydown', (e) => {
                const key = e.key;
                
                if (/[0-9.]/.test(key)) {
                    if (key === '.' && currentInput.includes('.')) return;
                    inputNumber(key);
                } else if (/[+\-*/%]/.test(key)) {
                    inputOperation(key);
                } else if (key === 'Enter' || key === '=') {
                    compute();
                } else if (key === 'Escape') {
                    handleSpecialFunctions('AC');
                } else if (key === 'Backspace') {
                    currentInput = currentInput.length > 1 ? currentInput.slice(0, -1) : '0';
                    updateDisplay();
                }
            });
            
            // Copy result on double click
            result.addEventListener('dblclick', () => {
                navigator.clipboard.writeText(result.textContent).then(() => {
                    copyNotice.classList.add('show-notice');
                    setTimeout(() => {
                        copyNotice.classList.remove('show-notice');
                    }, 2000);
                });
            });
        });
    </script>
</body>
</html>